buildscript {
    ext {
        springBootVersion = '2.0.0.M1'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

apply plugin: 'com.github.ben-manes.versions'

group = 'com.vivareal.search'

ext {
    artifactName = project.hasProperty('artifactName') ? artifactName : 'vivareal-search-api-v2-SNAPSHOT.jar'
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = false
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'VivaReal Search API v2', 'Implementation-Version': artifactName
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    mavenLocal()
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude module: 'spring-boot-starter-logging'
    compile.exclude module: 'undertow-websockets-jsr'
    newRelic
}

dependencies {
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile 'com.getsentry.raven:raven-logback:8.0.3'
    compile 'biz.paluch.logging:logstash-gelf:1.11.1'
    compile 'org.springframework.boot:spring-boot-starter-log4j2' // need this because org.elasticsearch:elasticsearch dependency

    compile 'com.google.guava:guava:21.0'
    compile 'org.jparsec:jparsec:3.0'
    compile 'org.apache.commons:commons-lang3:3.5'

    compile 'org.elasticsearch.client:transport:5.3.0'
    compile 'org.elasticsearch:elasticsearch:5.3.0'

    compile 'org.glowroot:glowroot-agent-api:0.9.7'
    compile 'com.newrelic.agent.java:newrelic-api:' + NEW_RELIC_VERSION
    newRelic 'com.newrelic.agent.java:newrelic-agent:' + NEW_RELIC_VERSION

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.boot:spring-boot-starter-log4j2'
}

task copyJarForDockerCompose(dependsOn: 'bootJar', type: Copy) {
    from bootJar
    into './build/libs/'
    rename { 'search-api.jar' }
}

task newrelic(dependsOn: 'bootJar') {
    doLast {
        copy {
            from configurations.newRelic.fileCollection { it.name == 'newrelic-agent' }.singleFile
            into './build/libs'
            rename { 'newrelic.jar' }
        }
    }

    if (project.hasProperty('newRelicKey')) {
        doLast {
            copy {
                filter(ReplaceTokens, tokens: [newRelicKey: newRelicKey])
                from 'src/main/resources/newrelic.yml'
                into './build/resources/main'
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

bootRun {
    systemProperties = System.properties
}

build.finalizedBy copyJarForDockerCompose, newrelic

bootJar {
    baseName = artifactName - '.jar'
    launchScript {
        included = true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "br.com.vivareal:search-api-v2"
        property "sonar.projectName", "search-api-v2"
        property "sonar.scm.provider", "git"
        property "sonar.host.url" , "http://sonarqube.vivareal.io/"
        property "sonar.sources", "src/main"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.tests", "src/test"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.login", "9eb3df2e079962a62dd40c39a9430795c856280e"
    }
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStackTraces true
        exceptionFormat 'full'
    }
}
